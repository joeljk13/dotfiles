[user]
    name = Joel Kottas
    email = sumnon@cj3.org

[core]
    editor = vim
    abbrev = 16
    excludesfile = ~/.gitignore
    pager = less -XFR
    whitespace = space-before-tab,trailing-space
    ignorecase = false

[add]
    ignoreErrors = true

[merge]
    tool = vimdiff
    conflictstyle = diff3

[rebase]
    stat = true

[rerere]
    enabled = true

[credential]
    helper = cache

[push]
    default = simple

[pull]
    rebase = true

[diff]
    mnemonicprefix = true
    renames = copies

[advice]
    pushUpdateRejected = false
    statusHints = false
    commitBeforeMerge = false
    resolveConflict = false
    detachedHead = false

[help]
    autocorrect = 20

[alias]
    abbrev-head = !echo 'ref: HEAD' >.git/h
    no-abbrev-head = !rm -f .git/h

    unstage = reset HEAD --

    df = diff
    dfc = diff --color=always
    dfw = diff --word-diff
    dfcw = diff --word-diff=color
    dfwc = diff --word-diff --color=always
    dfi = diff --cached
    dfic = diff --cached --color=always
    dfiw = diff --cached --word-diff
    dficw = diff --cached --word-diff=color
    dfiwc = diff --cached --word-diff --color=always
    dt = difftool -y

    ss = stash
    sp = stash pop
    sa = stash apply

    st = status
    stat = status

    cm = commit -v
    cma = !git add . && git commit -v
    cmd = commit -v --amend --reset-date

    cp = cherry-pick

    rb = rebase --stat
    rba = rebase --abort
    rbc = rebase --continue
    rbs = rebase --skip
    rbm = rebase --stat master
    rbi = rebase -i
    mg = "!f() { git merge --ff-only --stat \"$@\" || git merge --stat \
        --no-commit --log \"$@\" && git commit -v; }; f"
    mt = mergetool

    wipe = !git commit -aqm 'WIPE COMMIT' && git reset --hard HEAD^
    wp = !git wipe

    sw = show

# Logging

    last = log -1
    laste = log -1 --no-merges --patch --stat

    # General overview log
    lg = log --graph --abbrev=4 "--pretty=format:'%C(auto,yellow)#%h%C(auto,\
reset) {%s}%C(auto,green)%d%C(auto,reset)'"

    # Log for dates
    lgd = log --graph --abbrev=4 \
        "--pretty=format:'%C(auto,yellow)#%h%C(auto,reset) \
{%s}%C(auto,green)%d%C(auto,reset)%n\
<A: %C(auto,cyan)%ai%C(auto,reset) %C(auto,green)(%ar)%C(auto,reset)> \
<C: %C(auto,cyan)%ci%C(auto,reset) %C(auto,green)(%cr)%C(auto,reset)>'"

    # Log for names
    lgn = log --graph --abbrev=4 \
        "--pretty=format:'%C(auto,yellow)#%h%C(auto,reset) \
{%s}%C(auto,green)%d%C(auto,reset)%n\
<A: %C(auto,red)%aN%C(auto,reset) <%C(auto,magenta)%aE%C(auto,reset)>> \
<C: %C(auto,red)%cN%C(auto,reset) <%C(auto,magenta)%cE%C(auto,reset)>>'"

    # Logs for both names and dates

    lgdn = log --graph --abbrev=4 \
        "--pretty=format:'%C(auto,yellow)#%h%C(auto,reset) \
{%s}%C(auto,green)%d%C(auto,reset)%n\
<A: %C(auto,cyan)%ai%C(auto,reset) %C(auto,green)(%ar)%C(auto,reset)> \
<C: %C(auto,cyan)%ci%C(auto,reset) %C(auto,green)(%cr)%C(auto,reset)>%n\
<A: %C(auto,red)%aN%C(auto,reset) <%C(auto,magenta)%aE%C(auto,reset)>> \
<C: %C(auto,red)%cN%C(auto,reset) <%C(auto,magenta)%cE%C(auto,reset)>>'"

    lgnd = log --graph --abbrev=4 \
        "--pretty=format:'%C(auto,yellow)#%h%C(auto,reset) \
{%s}%C(auto,green)%d%C(auto,reset)%n\
<A: %C(auto,red)%aN%C(auto,reset) <%C(auto,magenta)%aE%C(auto,reset)>> \
<C: %C(auto,red)%cN%C(auto,reset) <%C(auto,magenta)%cE%C(auto,reset)>>%n\
<A: %C(auto,cyan)%ai%C(auto,reset) %C(auto,green)(%ar)%C(auto,reset)> \
<C: %C(auto,cyan)%ci%C(auto,reset) %C(auto,green)(%cr)%C(auto,reset)>'"

    # TODO - logs for detailed descriptions

    # TODO - customize this more, maybe
    lge = log --patch --stat --no-merges

    lga = !git lg --all
    lgda = !git lgd --all
    lgna = !git lgn --all
    lgnda = !git lgnd --all
    lgdna = !git lgdn --all

    lgc = !git lg --color=always
    lgdc = !git lgd --color=always
    lgnc = !git lgn --color=always
    lgndc = !git lgnd --color=always
    lgdnc = !git lgdn --color=always

    lgac = !git lg --all --color=always
    lgdac = !git lgd --all --color=always
    lgnac = !git lgn --all --color=always
    lgndac = !git lgnd --all --color=always
    lgdnac = !git lgdn --all --color=always

    lgca = !git lg --color=always --all
    lgdca = !git lgd --color=always --all
    lgnca = !git lgn --color=always --all
    lgndca = !git lgnd --color=always --all
    lgdnca = !git lgdn --color=always --all

# Where am I?

    br = branch
    co = checkout
    com = checkout master
    cob = checkout -b

    is-repo = "![ -d .git ] || [ \"$(git rev-parse --is-inside-work-tree \
        2>/dev/null)\" = true ]"

    ref = "!git is-repo || exit 128; \
        f() { ref=\"$(git symbolic-ref -q HEAD)\" \
        && echo \"$ref\" | sed 's,refs/heads/,,' \
        || git rev-parse $1 HEAD; }; f"

    current-branch = "!git symbolic-ref HEAD 2>/dev/null | \
        sed 's/refs\\/heads\\///'"

    branches = "!git for-each-ref --shell --format='%(refname)' refs/heads/ | \
        sed 's/refs\\/heads\\///' | tr -d \\'"

# Remotes

    fa = fetch --all
    up = pull --ff-only
    upa = "!c=$(git current-branch); \
        for branch in $(git branches); do \
        git checkout $branch && git pull --ff-only 2>/dev/null; \
        done; git checkout $c"

    ps = push
    pl = pull

# Github

    hub = "!tmp() { git clone \"github:$1/$2.git\"; }; tmp"

    pr = !git pull-requests
